Fri Nov  7 02:08:04 2008  Shugo Maeda  <shugo@ruby-lang.org>

	* lib/rexml/entity.rb (unnormalized): do not call
	  document.record_entity_expansion if document is nil.
	  see <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=502535>.
	  Thanks, Naohisa Goto.  backported from trunk.

	* test/rexml/test_document.rb: ditto.

Sat Sep 13 11:05:38 2008  Shugo Maeda  <shugo@ruby-lang.org>

	* lib/rexml/document.rb: limit entity expansion.  Thanks, Luka
	  Treiber, Mitja Kolsek, and Michael Koziarski.  backported from
	  trunk r19033, r19317, r19318.

	* lib/rexml/entity.rb: ditto.

	* test/rexml/test_document.rb: ditto.

Index: ruby_1_8/lib/rexml/document.rb
===================================================================
--- ruby_1_8/lib/rexml/document.rb	(revision 19319)
+++ ruby_1_8/lib/rexml/document.rb	(revision 19320)
@@ -32,6 +32,7 @@
 	  # @param context if supplied, contains the context of the document;
 	  # this should be a Hash.
 		def initialize( source = nil, context = {} )
+      @entity_expansion_count = 0
 			super()
 			@context = context
 			return if source.nil?
@@ -200,6 +201,27 @@
 			Parsers::StreamParser.new( source, listener ).parse
 		end
 
+    @@entity_expansion_limit = 10_000
+
+    # Set the entity expansion limit. By defualt the limit is set to 10000.
+    def Document::entity_expansion_limit=( val )
+      @@entity_expansion_limit = val
+    end
+
+    # Get the entity expansion limit. By defualt the limit is set to 10000.
+    def Document::entity_expansion_limit
+      return @@entity_expansion_limit
+    end
+
+    attr_reader :entity_expansion_count
+    
+    def record_entity_expansion
+      @entity_expansion_count += 1
+      if @entity_expansion_count > @@entity_expansion_limit
+        raise "number of entity expansions exceeded, processing aborted."
+      end
+    end
+
 		private
 		def build( source )
       Parsers::TreeParser.new( source, self ).parse
Index: ruby_1_8/lib/rexml/entity.rb
===================================================================
--- ruby_1_8/lib/rexml/entity.rb	(revision 19319)
+++ ruby_1_8/lib/rexml/entity.rb	(revision 20121)
@@ -73,6 +73,7 @@
 		# all entities -- both %ent; and &ent; entities.  This differs from
 		# +value()+ in that +value+ only replaces %ent; entities.
 		def unnormalized
+                        document.record_entity_expansion unless document.nil?
 			v = value()
 			return nil if v.nil?
 			@unnormalized = Text::unnormalize(v, parent)
===================================================================
--- ruby_1_8/test/rexml/test_document.rb	(revision 0)
+++ ruby_1_8/test/rexml/test_document.rb	(revision 20121)
@@ -0,0 +1,66 @@
+require "rexml/document"
+require "test/unit"
+
+class REXML::TestDocument < Test::Unit::TestCase
+  def test_new
+    doc = REXML::Document.new(<<EOF)
+<?xml version="1.0" encoding="UTF-8"?>
+<message>Hello world!</message>
+EOF
+    assert_equal("Hello world!", doc.root.children.first.value)
+  end
+
+  XML_WITH_NESTED_ENTITY = <<EOF
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE member [
+  <!ENTITY a "&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;">
+  <!ENTITY b "&c;&c;&c;&c;&c;&c;&c;&c;&c;&c;">
+  <!ENTITY c "&d;&d;&d;&d;&d;&d;&d;&d;&d;&d;">
+  <!ENTITY d "&e;&e;&e;&e;&e;&e;&e;&e;&e;&e;">
+  <!ENTITY e "&f;&f;&f;&f;&f;&f;&f;&f;&f;&f;">
+  <!ENTITY f "&g;&g;&g;&g;&g;&g;&g;&g;&g;&g;">
+  <!ENTITY g "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx">
+]>
+<member>
+&a;
+</member>
+EOF
+
+  XML_WITH_4_ENTITY_EXPANSION = <<EOF
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE member [
+  <!ENTITY a "a">
+  <!ENTITY a2 "&a; &a;">
+]>
+<member>
+&a;
+&a2;
+&lt;
+</member>
+EOF
+
+  def test_entity_expansion_limit
+    doc = REXML::Document.new(XML_WITH_NESTED_ENTITY)
+    assert_raise(RuntimeError) do
+      doc.root.children.first.value
+    end
+    REXML::Document.entity_expansion_limit = 100
+    assert_equal(100, REXML::Document.entity_expansion_limit)
+    doc = REXML::Document.new(XML_WITH_NESTED_ENTITY)
+    assert_raise(RuntimeError) do
+      doc.root.children.first.value
+    end
+    assert_equal(101, doc.entity_expansion_count)
+
+    REXML::Document.entity_expansion_limit = 4
+    doc = REXML::Document.new(XML_WITH_4_ENTITY_EXPANSION)
+    assert_equal("\na\na a\n<\n", doc.root.children.first.value)
+    REXML::Document.entity_expansion_limit = 3
+    doc = REXML::Document.new(XML_WITH_4_ENTITY_EXPANSION)
+    assert_raise(RuntimeError) do
+      doc.root.children.first.value
+    end
+  ensure
+    REXML::Document.entity_expansion_limit = 10000
+  end
+end

Property changes on: ruby_1_8/test/rexml/test_document.rb
___________________________________________________________________
Added: svn:keywords
   + Author Id Revision
Added: svn:eol-style
   + LF

